{"version":3,"file":"static/js/382.e89261de.chunk.js","mappings":"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","sources":["redux/selectors.js","components/helpers/js/searchName.js","components/Contacts/ContactForm/ContactForm.jsx","components/Contacts/ContactsFilter/ContactsFilter.jsx","../node_modules/@chakra-ui/layout/src/list.tsx","../node_modules/@chakra-ui/icon/src/create-icon.tsx","../node_modules/@chakra-ui/icons/src/Delete.tsx","../node_modules/@chakra-ui/icons/src/Edit.tsx","webpack://react-homework-template/./src/components/Modal/Modal.module.css?28d7","../node_modules/@chakra-ui/icons/src/Close.tsx","components/Modal/Modal.jsx","components/Contacts/ContactsList/ContactItem.jsx","components/Contacts/ContactsList/ContactsList.jsx","components/Pages/Contacts.jsx","../node_modules/@chakra-ui/layout/src/heading.tsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.contacts;\nexport const getFilterValue = state => state.filter;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const selectVisibleContacts = createSelector(\n  [getContacts, getFilterValue],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","export const searchName = (state, obj) => {\n  return state.find(\n    contact => contact.name.toLowerCase() === obj.name.toLowerCase()\n  );\n};\n","import { addContact } from 'redux/contactsOperations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts, getIsLoading } from 'redux/selectors';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  VStack,\n  Heading,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { useFormik } from 'formik';\nimport { searchName } from 'components/helpers/js/searchName';\nimport toast from 'react-hot-toast';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const IsLoading = useSelector(getIsLoading);\n  const contacts = useSelector(getContacts);\n\n  const border = useColorModeValue('1px solid #805AD5', '1px solid white');\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    onSubmit: async values => {\n      if (searchName(contacts, values)) {\n        return toast.error(`${values.name} is already in contacts`);\n      }\n\n      dispatch(addContact(values));\n      resetForm();\n    },\n  });\n\n  const resetForm = () => {\n    formik.resetForm();\n  };\n\n  return (\n    <>\n      <Heading>PhoneBook</Heading>\n\n      <Box bg=\"dark\" p={6} rounded=\"lg\" w={500} border={border} mt={5}>\n        <form onSubmit={formik.handleSubmit}>\n          <VStack spacing={4} align=\"flex-start\">\n            <FormControl>\n              <FormLabel htmlFor=\"name\">Name</FormLabel>\n              <Input\n                onChange={formik.handleChange}\n                value={formik.values.name}\n                id=\"name\"\n                name=\"name\"\n                type=\"text\"\n                variant=\"filled\"\n                border=\"1px solid white\"\n                _focus={{ border: '1px solid #d5a6bd' }}\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n              />\n            </FormControl>\n            <FormControl>\n              <FormLabel htmlFor=\"number\">Phone Number</FormLabel>\n\n              <Input\n                onChange={formik.handleChange}\n                value={formik.values.number}\n                id=\"number\"\n                name=\"number\"\n                type=\"tel\"\n                variant=\"filled\"\n                border=\"1px solid white \"\n                _focus={{ border: '1px solid #d5a6bd' }}\n                minLength=\"10\"\n                maxLength=\"13\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n                required\n              />\n            </FormControl>\n\n            <Button\n              type=\"submit\"\n              colorScheme=\"purple\"\n              width=\"full\"\n              disabled={IsLoading}\n            >\n              Add Contact\n            </Button>\n          </VStack>\n        </form>\n      </Box>\n    </>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { filterChange } from 'redux/filterSlice';\nimport { FormControl, FormLabel, Input } from '@chakra-ui/react';\n\nexport const ContactsFilter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const value = e.target.value;\n    dispatch(filterChange(value.trim()));\n  };\n\n  return (\n    <FormControl display=\"flex\" alignItems=\"baseline\" mt={5}>\n      <FormLabel fontSize={20}>Find contact</FormLabel>\n      <Input\n        type=\"text\"\n        autoComplete=\"off\"\n        onChange={handleChange}\n        w={377}\n        _focus={{ border: '1px solid #d5a6bd' }}\n      />\n    </FormControl>\n  );\n};\n","import { Icon, IconProps } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport type {\n  HTMLChakraProps,\n  SystemProps,\n  ThemingProps,\n} from \"@chakra-ui/system\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemStyleObject,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\n\nconst [ListStylesProvider, useListStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `ListStylesContext`,\n  errorMessage: `useListStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<List />\" `,\n})\n\nexport { useListStyles }\n\ninterface ListOptions {\n  /**\n   * Shorthand prop for `listStyleType`\n   * @type SystemProps[\"listStyleType\"]\n   */\n  styleType?: SystemProps[\"listStyleType\"]\n  /**\n   * Shorthand prop for `listStylePosition`\n   * @type SystemProps[\"listStylePosition\"]\n   */\n  stylePosition?: SystemProps[\"listStylePosition\"]\n  /**\n   * The space between each list item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n}\n\nexport interface ListProps\n  extends HTMLChakraProps<\"ul\">,\n    ThemingProps<\"List\">,\n    ListOptions {}\n\n/**\n * List is used to display list items, it renders a `<ul>` by default.\n *\n * @see Docs https://chakra-ui.com/list\n */\nexport const List = forwardRef<ListProps, \"ul\">(function List(props, ref) {\n  const styles = useMultiStyleConfig(\"List\", props)\n  const {\n    children,\n    styleType = \"none\",\n    stylePosition,\n    spacing,\n    ...rest\n  } = omitThemingProps(props)\n\n  const validChildren = getValidChildren(children)\n\n  const selector = \"& > *:not(style) ~ *:not(style)\"\n\n  const spacingStyle = spacing ? { [selector]: { mt: spacing } } : {}\n\n  return (\n    <ListStylesProvider value={styles}>\n      <chakra.ul\n        ref={ref}\n        listStyleType={styleType}\n        listStylePosition={stylePosition}\n        /**\n         * We added this role to fix the Safari accessibility issue with list-style-type: none\n         * @see https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html\n         */\n        role=\"list\"\n        __css={{ ...styles.container, ...spacingStyle }}\n        {...rest}\n      >\n        {validChildren}\n      </chakra.ul>\n    </ListStylesProvider>\n  )\n})\n\nList.displayName = \"List\"\n\nexport const OrderedList = forwardRef<ListProps, \"ol\">((props, ref) => {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ol\" styleType=\"decimal\" marginStart=\"1em\" {...rest} />\n  )\n})\n\nOrderedList.displayName = \"OrderedList\"\n\nexport const UnorderedList = forwardRef<ListProps, \"ul\">(function UnorderedList(\n  props,\n  ref,\n) {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ul\" styleType=\"initial\" marginStart=\"1em\" {...rest} />\n  )\n})\n\nUnorderedList.displayName = \"UnorderedList\"\n\nexport interface ListItemProps extends HTMLChakraProps<\"li\"> {}\n\n/**\n * ListItem\n *\n * Used to render a list item\n */\nexport const ListItem = forwardRef<ListItemProps, \"li\">(function ListItem(\n  props,\n  ref,\n) {\n  const styles = useListStyles()\n\n  return <chakra.li ref={ref} {...props} __css={styles.item} />\n})\n\nListItem.displayName = \"ListItem\"\n\n/**\n * ListIcon\n *\n * Used to render an icon beside the list item text\n */\nexport const ListIcon = forwardRef<IconProps, \"svg\">(function ListIcon(\n  props,\n  ref,\n) {\n  const styles = useListStyles()\n\n  return <Icon ref={ref} role=\"presentation\" {...props} __css={styles.icon} />\n})\n\nListIcon.displayName = \"ListIcon\"\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { Children } from \"react\"\nimport { Icon, IconProps } from \"./icon\"\n\ninterface CreateIconOptions {\n  /**\n   * The icon `svg` viewBox\n   * @default \"0 0 24 24\"\n   */\n  viewBox?: string\n  /**\n   * The `svg` path or group element\n   * @type React.ReactElement | React.ReactElement[]\n   */\n  path?: React.ReactElement | React.ReactElement[]\n  /**\n   * If the `svg` has a single path, simply copy the path's `d` attribute\n   */\n  d?: string\n  /**\n   * The display name useful in the dev tools\n   */\n  displayName?: string\n  /**\n   * Default props automatically passed to the component; overwritable\n   */\n  defaultProps?: IconProps\n}\n\nexport function createIcon(options: CreateIconOptions) {\n  const {\n    viewBox = \"0 0 24 24\",\n    d: pathDefinition,\n    displayName,\n    defaultProps = {},\n  } = options\n  const path = Children.toArray(options.path)\n\n  const Comp = forwardRef<IconProps, \"svg\">((props, ref) => (\n    <Icon ref={ref} viewBox={viewBox} {...defaultProps} {...props}>\n      {path.length ? path : <path fill=\"currentColor\" d={pathDefinition} />}\n    </Icon>\n  ))\n\n  Comp.displayName = displayName\n\n  return Comp\n}\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const DeleteIcon = createIcon({\n  displayName: \"DeleteIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M19.452 7.5H4.547a.5.5 0 00-.5.545l1.287 14.136A2 2 0 007.326 24h9.347a2 2 0 001.992-1.819L19.95 8.045a.5.5 0 00-.129-.382.5.5 0 00-.369-.163zm-9.2 13a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zm5 0a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zM22 4h-4.75a.25.25 0 01-.25-.25V2.5A2.5 2.5 0 0014.5 0h-5A2.5 2.5 0 007 2.5v1.25a.25.25 0 01-.25.25H2a1 1 0 000 2h20a1 1 0 000-2zM9 3.75V2.5a.5.5 0 01.5-.5h5a.5.5 0 01.5.5v1.25a.25.25 0 01-.25.25h-5.5A.25.25 0 019 3.75z\" />\n    </g>\n  ),\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const EditIcon = createIcon({\n  displayName: \"EditIcon\",\n  path: (\n    <g fill=\"none\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeWidth=\"2\">\n      <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\" />\n      <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\" />\n    </g>\n  ),\n})\n","// extracted by mini-css-extract-plugin\nexport default {\"Overlay\":\"Modal_Overlay__yoxbg\",\"modal\":\"Modal_modal__DJDMv\"};","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const CloseIcon = createIcon({\n  displayName: \"CloseIcon\",\n  d: \"M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z\",\n})\n","import css from './Modal.module.css';\nimport { createPortal } from 'react-dom';\nimport { useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { editContact } from 'redux/contactsOperations';\nimport { IconButton, Icon } from '@chakra-ui/react';\nimport { CloseIcon } from '@chakra-ui/icons';\nimport PropTypes from 'prop-types';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport function Modal({ onClose, name, number, id }) {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeydown);\n    return () => {\n      window.removeEventListener('keydown', handleKeydown);\n    };\n  });\n\n  const handleKeydown = e => {\n    if (e.code === 'Escape') {\n      onClose();\n    }\n  };\n\n  const handleBackdropClick = e => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      name: name,\n      number: number,\n    },\n    onSubmit: values => {\n      if (values.name === name && values.number === number) {\n        return;\n      }\n      dispatch(editContact({ id, values }));\n      onClose();\n    },\n  });\n\n  return createPortal(\n    <div className={css.Overlay} onClick={handleBackdropClick}>\n      <Box\n        bg=\"dark\"\n        p={6}\n        rounded=\"lg\"\n        w={500}\n        border=\"1px solid white\"\n        position={'relative'}\n      >\n        <IconButton\n          role=\"group\"\n          size={'sm'}\n          position=\"absolute\"\n          right={2}\n          top={2}\n          onClick={onClose}\n        >\n          <Icon\n            as={CloseIcon}\n            _groupHover={{\n              transform: 'rotate(90deg)',\n              transition: 'transform 0.5s',\n            }}\n          />\n        </IconButton>\n        <form onSubmit={formik.handleSubmit}>\n          <VStack spacing={4} align=\"flex-start\">\n            <FormControl>\n              <FormLabel htmlFor=\"name\">Name</FormLabel>\n              <Input\n                onChange={formik.handleChange}\n                value={formik.values.name}\n                id=\"name\"\n                name=\"name\"\n                type=\"text\"\n                variant=\"filled\"\n                border=\"1px solid white \"\n                _focus={{ border: '1px solid #d5a6bd', color: 'white' }}\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n              />\n            </FormControl>\n            <FormControl>\n              <FormLabel htmlFor=\"number\">Phone Number</FormLabel>\n              <Input\n                onChange={formik.handleChange}\n                value={formik.values.number}\n                id=\"number\"\n                name=\"number\"\n                type=\"tel\"\n                variant=\"filled\"\n                border=\"1px solid white \"\n                _focus={{ border: '1px solid #d5a6bd', color: 'white' }}\n                required\n                minLength=\"10\"\n                maxLength=\"13\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n              />\n            </FormControl>\n\n            <Button type=\"submit\" colorScheme=\"purple\" width=\"full\">\n              Edit\n            </Button>\n          </VStack>\n        </form>\n      </Box>\n    </div>,\n    modalRoot\n  );\n}\nModal.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onClose: PropTypes.func,\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contactsOperations';\nimport {\n  ListItem,\n  Text,\n  Box,\n  IconButton,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { DeleteIcon, EditIcon } from '@chakra-ui/icons';\n\nimport PropTypes from 'prop-types';\nimport { getIsLoading } from 'redux/selectors';\nimport { useState } from 'react';\nimport { Modal } from 'components/Modal/Modal';\n\nexport const ContactItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  const IsLoading = useSelector(getIsLoading);\n  const [showModal, setShowModal] = useState(false);\n\n  const border = useColorModeValue('1px solid purple', '1px solid  #D6BCFA');\n\n  const toggleModal = () => setShowModal(state => !state);\n\n  const handleDelete = id => {\n    dispatch(deleteContact(id));\n  };\n  return (\n    <>\n      <ListItem\n        mt={4}\n        borderBottom={border}\n        display={'flex'}\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        w=\"600px\"\n        mr=\"10px\"\n      >\n        <Text fontSize={'lg'}>\n          {name}: {number}\n        </Text>\n        <Box>\n          <IconButton\n            mr={5}\n            border={'none'}\n            colorScheme=\"purple\"\n            aria-label=\"Delete Contact\"\n            size=\"md\"\n            icon={<DeleteIcon />}\n            onClick={() => handleDelete(id)}\n            variant=\"outline\"\n            disabled={IsLoading}\n          />\n          <IconButton\n            border={'none'}\n            colorScheme=\"purple\"\n            aria-label=\"Edit Contact\"\n            size=\"md\"\n            icon={<EditIcon />}\n            onClick={toggleModal}\n            variant=\"outline\"\n            disabled={IsLoading}\n          />\n        </Box>\n      </ListItem>\n      {showModal && (\n        <Modal onClose={toggleModal} name={name} number={number} id={id} />\n      )}\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  optionalObjectWithShape: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.number.isRequired,\n    id: PropTypes.string.isRequired,\n  }),\n};\n","import { useSelector } from 'react-redux';\nimport { getIsLoading, selectVisibleContacts } from 'redux/selectors';\nimport { ContactItem } from './ContactItem';\n\nimport { List } from '@chakra-ui/react';\n\nimport { Loader } from 'components/helpers/Loader/Loader';\n\nexport const ContactsList = () => {\n  const IsLoading = useSelector(getIsLoading);\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <List\n      mt={7}\n      display=\"flex\"\n      flexDirection={'column-reverse'}\n      justifyContent={'flex-end'}\n      h=\"300px\"\n    >\n      {IsLoading && <Loader />}\n      {visibleContacts.map(({ number, id, name }) => {\n        return <ContactItem key={id} name={name} number={number} id={id} />;\n      })}\n    </List>\n  );\n};\n","import { Box} from '@chakra-ui/react';\nimport { ContactForm } from 'components/Contacts/ContactForm/ContactForm';\nimport { ContactsFilter } from 'components/Contacts/ContactsFilter/ContactsFilter';\nimport { ContactsList } from 'components/Contacts/ContactsList/ContactsList';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsLoggedIn } from 'redux/auth/selectors';\nimport { fetchContacts } from 'redux/contactsOperations';\nimport { Toaster } from 'react-hot-toast';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <Box padding=\"20px 30px\">\n      <ContactForm />\n\n      <ContactsFilter />\n      {isLoggedIn && <ContactsList />}\n\n      <Toaster position=\"top-right\" />\n    </Box>\n  );\n};\n\nexport default Contacts;\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n"],"names":["getContacts","state","contacts","getIsLoading","isLoading","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","searchName","obj","find","ContactForm","dispatch","useDispatch","IsLoading","useSelector","border","useColorModeValue","formik","useFormik","initialValues","number","onSubmit","values","toast","addContact","resetForm","bg","p","rounded","w","mt","handleSubmit","spacing","align","htmlFor","I","onChange","handleChange","value","id","type","variant","_focus","pattern","title","required","minLength","maxLength","colorScheme","width","disabled","ContactsFilter","display","alignItems","fontSize","autoComplete","e","target","filterChange","trim","createContext","errorMessage","ListStylesProvider","useListStyles","List","props","forwardRef","styles","children","styleType","useMultiStyleConfig","omitThemingProps","stylePosition","rest","validChildren","selector","spacingStyle","getValidChildren","ul","listStyleType","chakra","role","__css","container","displayName","OrderedList","as","UnorderedList","ListItem","ListIcon","Icon","viewBox","pathDefinition","d","defaultProps","path","toArray","Comp","createIcon","ref","Children","options","length","fill","DeleteIcon","EditIcon","stroke","strokeLinecap","strokeWidth","jsx","CloseIcon","modalRoot","document","querySelector","Modal","onClose","useEffect","window","addEventListener","handleKeydown","removeEventListener","code","editContact","createPortal","className","css","onClick","currentTarget","position","size","right","top","_groupHover","transform","transition","color","ContactItem","useState","showModal","setShowModal","toggleModal","borderBottom","justifyContent","mr","icon","deleteContact","handleDelete","ContactsList","visibleContacts","flexDirection","h","Loader","map","isLoggedIn","selectIsLoggedIn","fetchContacts","padding","useStyleConfig","h2","Heading","cx"],"sourceRoot":""}